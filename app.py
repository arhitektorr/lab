from flask import Flask, request, Response
import re
import gspread
from google.oauth2.service_account import Credentials
import openai

# === üîë OpenAI ===
client = openai.OpenAI(api_key="")  # ‚Üê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π OpenAI API –∫–ª—é—á

# === üìä Google Sheets ===
scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
creds = Credentials.from_service_account_file("credentials.json", scopes=scope)
gs_client = gspread.authorize(creds)

spreadsheet_id = ""  # ‚Üê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ ID —Å–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü—ã
sheet = gs_client.open_by_key(spreadsheet_id).sheet1
header_row = sheet.row_values(2)
rows = sheet.get_all_records(head=2, expected_headers=header_row)

# === ‚öôÔ∏è Flask App ===
app = Flask(__name__)

# === üß† GPT: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ ===
def extract_keywords_from_text(text):
    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã –±–æ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç, –∫–∞–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã —Ö–æ—á–µ—Ç —Å–¥–∞—Ç—å. "
                    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤, –≥–æ—Ä–º–æ–Ω–æ–≤, –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. "
                    "–ù–µ –ø–∏—à–∏ –æ–±—â–∏–µ —Å–ª–æ–≤–∞: –Ω–∞–ø—Ä–∏–º–µ—Ä '–±–∏–æ—Ö–∏–º–∏—è', '–∑–¥–æ—Ä–æ–≤—å–µ', '—á–µ–∫-–∞–ø', '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å—Å—è', '–∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏'. "
                    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ, –≤–µ—Ä–Ω–∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã. "
                    "–ï—Å–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –∏ –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. "
                    "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ —Å–ø–∏—Å–∫–æ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
                )
            },
            {"role": "user", "content": text}
        ]
    )
    keywords = response.choices[0].message.content.strip()
    print("üß† GPT –≤–µ—Ä–Ω—É–ª –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:", keywords)
    return [kw.strip().lower() for kw in keywords.split(",") if kw.strip()]

# === üîé –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º ===
def contains_exact_word(text, word):
    pattern = r'\b' + re.escape(word) + r'(–∞|—É|–µ|–æ–º|—ã|–æ–≤|–∞—Ö|–∞–º)?\b'
    return re.search(pattern, text.lower())

def search_rows_by_keywords(keywords):
    matches = []
    for row in rows:
        name = str(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).lower()
        if any(contains_exact_word(name, kw) for kw in keywords):
            matches.append(row)
    return matches

# === üåê API ===
@app.route("/analyze", methods=["POST"])
def analyze():
    user_message = request.json.get("text", "")
    if not user_message:
        return Response("‚ùó –ó–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π.", content_type="text/plain; charset=utf-8")

    keywords = extract_keywords_from_text(user_message)
    print("üîë –ö–ª—é—á–∏ GPT:", keywords)

    if not keywords:
        return Response("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å.", content_type="text/plain; charset=utf-8")

    results = search_rows_by_keywords(keywords)

    if results:
        response_lines = [
            f"{i+1}Ô∏è‚É£ {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\nüí∞ –¶–µ–Ω–∞ ‚Äî {row['–¶–µ–Ω–∞']} —Ä—É–±.\n‚è±Ô∏è –°—Ä–æ–∫ ‚Äî {row['–°—Ä–æ–∫ –∏—Å–ø.']}"
            for i, row in enumerate(results[:10])
        ]
        final_text = "\n\n".join(response_lines)
    else:
        final_text = "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω–∞—á–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."

    return Response(final_text, content_type="text/plain; charset=utf-8")

# === ‚ñ∂ –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app.run(debug=True, port=5000)
