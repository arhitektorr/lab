from flask import Flask, request, jsonify
import re
import gspread
from google.oauth2.service_account import Credentials
import openai

# === üîë OpenAI ===
client = openai.OpenAI(api_key="sk-...")  # –í—Å—Ç–∞–≤—å —Å–≤–æ–π API –∫–ª—é—á

# === üìä Google Sheets ===
scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
creds = Credentials.from_service_account_file("credentials.json", scopes=scope)
gs_client = gspread.authorize(creds)

spreadsheet_id = "1Ao-FgsBLHau3SDH3HfjTOlmO1q16F8EBKsU46znOHgE"  # –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π
sheet = gs_client.open_by_key(spreadsheet_id).sheet1
header_row = sheet.row_values(2)
rows = sheet.get_all_records(head=2, expected_headers=header_row)
available_names = [str(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).strip() for row in rows]

# === ‚öôÔ∏è Flask App ===
app = Flask(__name__)

# === üß† GPT: –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π ===
def extract_keywords_from_text(text):
    available_str = ", ".join(available_names[:300])  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º

    prompt = (
        "–¢—ã –±–æ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏. –ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –∏–∑ –ø—Ä–∞–π—Å–∞:\n"
        f"{available_str}\n\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª, –∫–∞–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –æ–Ω —Ö–æ—á–µ—Ç —Å–¥–∞—Ç—å. "
        "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ –ø—Ä–∞–π—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –∑–∞–ø—Ä–æ—Å. "
        "–ù–∏–∫–∞–∫–∏—Ö –≤—ã–¥—É–º–∞–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π, –Ω–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π ‚Äî —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
    )

    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": text}
        ]
    )

    raw = response.choices[0].message.content.strip()
    print("üß† GPT –≤–µ—Ä–Ω—É–ª –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:", raw)
    return [kw.strip().lower() for kw in raw.split(",") if kw.strip()]

# === üîé –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ===
def search_rows_by_keywords(keywords):
    matches = []
    for row in rows:
        name = str(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).lower()
        if any(kw in name for kw in keywords):
            matches.append(row)
    return matches

# === üåê –≠–Ω–¥–ø–æ–∏–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞ ===
@app.route("/analyze", methods=["POST"])
def analyze():
    user_message = request.json.get("text", "").strip()
    if not user_message:
        return jsonify({"response": "‚ùó –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –£—Ç–æ—á–Ω–∏—Ç–µ, –∫–∞–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç."})

    keywords = extract_keywords_from_text(user_message)

    if not keywords or all(len(kw) < 2 for kw in keywords):
        return jsonify({"response": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É."})

    results = search_rows_by_keywords(keywords)

    if results:
        response_lines = [
            f"{i+1}Ô∏è‚É£ {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\nüí∞ –¶–µ–Ω–∞: {row['–¶–µ–Ω–∞']} —Ä—É–±.\n‚è±Ô∏è –°—Ä–æ–∫: {row['–°—Ä–æ–∫ –∏—Å–ø.']}"
            for i, row in enumerate(results[:10])
        ]
        return jsonify({"response": "\n\n".join(response_lines)})
    else:
        return jsonify({"response": "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å."})

# === ‚ñ∂ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è  —Ñ—Ñ===
if __name__ == "__main__":
    app.run(debug=True, port=5000)
