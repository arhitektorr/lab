from flask import Flask, request, jsonify
import re
import gspread
from google.oauth2.service_account import Credentials
import openai

# === üîë OpenAI ===
client = openai.OpenAI(api_key="")  # ‚Üê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π OpenAI API –∫–ª—é—á

# === üìä Google Sheets ===
scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
creds = Credentials.from_service_account_file("credentials.json", scopes=scope)
gs_client = gspread.authorize(creds)

spreadsheet_id = ""  # ‚Üê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ ID —Å–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü—ã
sheet = gs_client.open_by_key(spreadsheet_id).sheet1
header_row = sheet.row_values(2)
rows = sheet.get_all_records(head=2, expected_headers=header_row)
available_names = [str(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).strip() for row in rows]

# === ‚öôÔ∏è Flask App ===
app = Flask(__name__)

# === üß† GPT: –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π ===
def extract_keywords_from_text(text):
    available_str = ", ".join(available_names[:300])  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ç–æ–∫–µ–Ω–∞–º

    prompt = (
        "–¢—ã –±–æ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏. –ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –∏–∑ –ø—Ä–∞–π—Å–∞:\n"
        f"{available_str}\n\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª, –∫–∞–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –æ–Ω —Ö–æ—á–µ—Ç —Å–¥–∞—Ç—å. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç. "
        "–ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –ø–æ–Ω—è—Ç–Ω–æ–≥–æ ‚Äî –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. "
        "–ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∞–∑–≤–∞–Ω–∏—è. –ù–µ –æ–±—ä—è—Å–Ω—è–π. –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
    )

    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": text}
        ]
    )

    raw_text = response.choices[0].message.content.strip()
    print("üß† GPT –≤–µ—Ä–Ω—É–ª –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:", raw_text)

    # –§–∏–ª—å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    bad_phrases = ["–ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "–Ω–∞–ø–∏—à–∏—Ç–µ", "–Ω–µ –ø–æ–Ω—è–ª", "—á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ", "–∞–Ω–∞–ª–∏–∑—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å"]
    if any(phrase in raw_text.lower() for phrase in bad_phrases):
        return []

    return [kw.strip().lower() for kw in raw_text.split(",") if kw.strip()]

# === üîç –ü–æ–∏—Å–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ===
def contains_exact_word(text, word):
    pattern = r'\b' + re.escape(word) + r'(–∞|—É|–µ|–æ–º|—ã|–æ–≤|–∞—Ö|–∞–º)?\b'
    return re.search(pattern, text.lower())

def search_rows_by_keywords(keywords):
    matches = []
    for row in rows:
        name = str(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).lower()
        if any(contains_exact_word(name, kw) for kw in keywords):
            matches.append(row)
    return matches

# === üåê –≠–Ω–¥–ø–æ–∏–Ω—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–∞ ===
@app.route("/analyze", methods=["POST"])
def analyze():
    user_message = request.json.get("text", "")
    if not user_message:
        return jsonify({"response": "‚ùó –ó–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π."})

    keywords = extract_keywords_from_text(user_message)
    print("üîë –ö–ª—é—á–∏ GPT:", keywords)

    if not keywords:
        return jsonify({"response": "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Ç–æ—á–Ω–µ–µ."})

    results = search_rows_by_keywords(keywords)

    if results:
        response_lines = [
            f"{i+1}Ô∏è‚É£ {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\nüí∞ {row['–¶–µ–Ω–∞']} —Ä—É–±.\n‚è±Ô∏è –°—Ä–æ–∫ ‚Äî {row['–°—Ä–æ–∫ –∏—Å–ø.']}"
            for i, row in enumerate(results[:10])
        ]
        return jsonify({"response": "\n\n".join(response_lines)})
    else:
        return jsonify({"response": "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."})

# === ‚ñ∂ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
if __name__ == "__main__":
    app.run(debug=True, port=5000)
