from flask import Flask, request, jsonify
import os
import re
import gspread
from google.oauth2.service_account import Credentials
import openai

# === üîë OpenAI ===
client = openai.OpenAI(api_key="")

# === üìä Google Sheets ===
scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
creds = Credentials.from_service_account_file("credentials.json", scopes=scope)
gs_client = gspread.authorize(creds)
spreadsheet_id = "1Ao-df"
sheet = gs_client.open_by_key(spreadsheet_id).sheet1
header_row = sheet.row_values(2)
rows = sheet.get_all_records(head=2, expected_headers=header_row)

# === ‚öôÔ∏è Flask App ===
app = Flask(__name__)

# === üîç GPT-–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ===
def extract_keywords_from_text(text):
    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã –±–æ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç, –∫–∞–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã —Ö–æ—á–µ—Ç —Å–¥–∞—Ç—å. "
                    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏–ª–∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. "
                    "–ù–∏–∫–∞–∫–∏—Ö –æ–±—â–∏—Ö —Å–ª–æ–≤: –Ω–µ –ø–∏—à–∏ '–æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏', '–±–∏–æ—Ö–∏–º–∏—è', '–ø–µ—á–µ–Ω—å', '–∑–¥–æ—Ä–æ–≤—å–µ', '—á–µ–∫-–∞–ø'. "
                    "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –ø—Ä–æ—Å—Ç–æ '–≤–∏—Ç–∞–º–∏–Ω—ã', –≤–µ—Ä–Ω–∏ —Å–ø–∏—Å–æ–∫ —Ç–∏–ø–∞: '–≤–∏—Ç–∞–º–∏–Ω D, –≤–∏—Ç–∞–º–∏–Ω B12, —Ñ–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞, —Ñ–µ—Ä—Ä–∏—Ç–∏–Ω, –º–∞–≥–Ω–∏–π, —Ü–∏–Ω–∫'. "
                    "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∫–æ–º –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π –∏ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."
                )
            },
            {"role": "user", "content": text}
        ]
    )
    keywords = response.choices[0].message.content.strip()
    print("üß† GPT –≤–µ—Ä–Ω—É–ª –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:", keywords)
    return [kw.strip().lower() for kw in response.choices[0].message.content.split(",")]

# === üîé –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º ===
def contains_exact_word(text, word):
    pattern = r'\b' + re.escape(word) + r'(–∞|—É|–µ|–æ–º|—ã|–æ–≤|–∞—Ö|–∞–º)?\b'
    return re.search(pattern, text.lower())

def search_rows_by_keywords(keywords):
    matches = []
    for row in rows:
        name = str(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).lower()
        if any(contains_exact_word(name, kw) for kw in keywords):
            matches.append(row)
    return matches

# === üåê API ===
@app.route("/analyze", methods=["POST"])
def analyze():
    user_message = request.json.get("text", "")
    if not user_message:
        return jsonify({"response": "‚ùó –ó–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π."})

    keywords = extract_keywords_from_text(user_message)
    print("üîë –ö–ª—é—á–∏ GPT:", keywords)

    results = search_rows_by_keywords(keywords)

    if results:
        response_lines = [
            f"{i+1}Ô∏è‚É£ {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\nüí∞ –¶–µ–Ω–∞ ‚Äî {row['–¶–µ–Ω–∞']} —Ä—É–±.\n‚è±Ô∏è –°—Ä–æ–∫ ‚Äî {row['–°—Ä–æ–∫ –∏—Å–ø.']}"
            for i, row in enumerate(results[:10])
        ]
        return jsonify({"response": "\n\n".join(response_lines)})
    else:
        return jsonify({"response": "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."})

# === ‚ñ∂ –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app.run(debug=True, port=5000)
