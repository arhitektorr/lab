from flask import Flask, request, jsonify
import re
import gspread
from google.oauth2.service_account import Credentials
import openai

# === üîê OpenAI ===
client = openai.OpenAI(api_key="sk-...")  # –í–°–¢–ê–í–¨ –°–í–û–ô –ö–õ–Æ–ß

# === üìä Google Sheets ===
scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
creds = Credentials.from_service_account_file("credentials.json", scopes=scope)
gs_client = gspread.authorize(creds)

spreadsheet_id = "..."  # –í–°–¢–ê–í–¨ ID —Å–≤–æ–µ–π —Ç–∞–±–ª–∏—Ü—ã
sheet = gs_client.open_by_key(spreadsheet_id).sheet1
header_row = sheet.row_values(2)
rows = sheet.get_all_records(head=2, expected_headers=header_row)

# === üìå –°–æ–±–µ—Ä—ë–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
available_names = [str(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).strip() for row in rows]

# === ‚öôÔ∏è Flask App ===
app = Flask(__name__)

# === üß† GPT: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ ===
def extract_keywords_from_text(text):
    available_str = ", ".join(available_names[:300])  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è GPT

    prompt = (
        "–¢—ã –±–æ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç, –∫–∞–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –æ–Ω —Ö–æ—á–µ—Ç —Å–¥–∞—Ç—å. "
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ –ø—Ä–∞–π—Å–µ:\n"
        f"{available_str}\n\n"
        "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –ø–æ–¥ –µ–≥–æ –∑–∞–ø—Ä–æ—Å ‚Äî –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤, –±–µ–∑ –≤—ã–¥—É–º–∫–∏. "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –µ—Ä—É–Ω–¥—É –∏–ª–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å ‚Äî –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç.\n"
        "–§–æ—Ä–º–∞—Ç: –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫."
    )

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": prompt},
            {"role": "user", "content": text}
        ]
    )

    raw = response.choices[0].message.content.strip()
    print("üß† GPT –≤–µ—Ä–Ω—É–ª:", raw)

    # –ï—Å–ª–∏ GPT –≤—Å—ë –∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª —á—Ç–æ-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–æ–µ
    if "–Ω–∏—á–µ–≥–æ" in raw.lower() or raw.strip() == "":
        return []

    return [kw.strip().lower() for kw in raw.split(",") if kw.strip()]

# === üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Å—Ç—Ä–æ–∫–µ
def contains_exact_word(text, word):
    pattern = r'\b' + re.escape(word) + r'(–∞|—É|–µ|–æ–º|—ã|–æ–≤|–∞—Ö|–∞–º)?\b'
    return re.search(pattern, text.lower())

def search_rows_by_keywords(keywords):
    matches = []
    for row in rows:
        name = str(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).lower()
        if any(contains_exact_word(name, kw) for kw in keywords):
            matches.append(row)
    return matches

# === üåê API
@app.route("/analyze", methods=["POST"])
def analyze():
    user_message = request.json.get("text", "")
    if not user_message:
        return jsonify({"response": "‚ùó –ó–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π."})

    keywords = extract_keywords_from_text(user_message)
    print("üîë –ö–ª—é—á–∏:", keywords)

    if not keywords:
        return jsonify({"response": "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å."})

    results = search_rows_by_keywords(keywords)

    if results:
        response_lines = [
            f"{i+1}Ô∏è‚É£ {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\nüí∞ –¶–µ–Ω–∞ ‚Äî {row['–¶–µ–Ω–∞']} —Ä—É–±.\n‚è±Ô∏è –°—Ä–æ–∫ ‚Äî {row['–°—Ä–æ–∫ –∏—Å–ø.']}"
            for i, row in enumerate(results[:10])
        ]
        return jsonify({"response": "\n\n".join(response_lines)})
    else:
        return jsonify({"response": "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."})

# === ‚ñ∂ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app.run(debug=True, port=5000)
