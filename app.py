from flask import Flask, request, jsonify
import os
import re
import gspread
from google.oauth2.service_account import Credentials
import openai

app = Flask(__name__)

# === üîë OpenAI ===
client = openai.OpenAI(api_key="your-api-key")  # ‚Üê –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

# === üìä Google Sheets ===
scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
creds = Credentials.from_service_account_file("credentials.json", scopes=scope)
gs_client = gspread.authorize(creds)
spreadsheet_id = "your-spreadsheet-id"
sheet = gs_client.open_by_key(spreadsheet_id).sheet1
header_row = sheet.row_values(2)
rows = sheet.get_all_records(head=2, expected_headers=header_row)

# === üîç GPT-–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ===
def extract_keywords_from_text(text):
    try:
        response = client.chat.completions.create(
            model="gpt-4",  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å—Ç—Ä–æ–≥–æ –≤—ã–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ lowercase, –±–µ–∑ —Ç–æ—á–µ–∫, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –º–µ–¥–∏—Ü–∏–Ω–æ–π ‚Äî –æ—Ç–≤–µ—á–∞–π '–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'."
                },
                {"role": "user", "content": text}
            ],
            temperature=0.3  # –î–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        )
        
        keywords = response.choices[0].message.content.strip()
        print("üß† GPT –≤–µ—Ä–Ω—É–ª –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:", keywords)
        
        if keywords == "–ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤":
            return []
            
        return [kw.strip().lower() for kw in keywords.split(",") if kw.strip()]
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {str(e)}")
        return []

# === üîé –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–∞–º ===
def contains_exact_word(text, word):
    if not text or not word:
        return False
    pattern = r'\b' + re.escape(word) + r'(–∞|—É|–µ|–æ–º|—ã|–æ–≤|–∞—Ö|–∞–º)?\b'
    return re.search(pattern, str(text).lower())

def search_rows_by_keywords(keywords):
    matches = []
    if not keywords:
        return matches
        
    for row in rows:
        name = str(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).lower()
        description = str(row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "")).lower()
        
        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏–∏
        for kw in keywords:
            if (contains_exact_word(name, kw) or 
                contains_exact_word(description, kw)):
                matches.append(row)
                break
                
    return matches

# === üåê API ===
@app.route("/analyze", methods=["POST"])
def analyze():
    try:
        user_message = request.json.get("text", "").strip()
        if not user_message:
            return jsonify({"error": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"}), 400

        print("üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:", user_message)
        keywords = extract_keywords_from_text(user_message)
        print("üîë –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:", keywords)

        if not keywords:
            return jsonify({"response": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É"})

        results = search_rows_by_keywords(keywords)

        if results:
            response_data = [
                {
                    "name": row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""),
                    "price": row.get("–¶–µ–Ω–∞", ""),
                    "duration": row.get("–°—Ä–æ–∫ –∏—Å–ø.", "")
                }
                for row in results[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            ]
            return jsonify({"response": response_data})
        else:
            return jsonify({"response": "–ê–Ω–∞–ª–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"})
            
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

# === ‚ñ∂ –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app.run(debug=True, port=5000, host="0.0.0.0")
