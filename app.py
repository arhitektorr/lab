from flask import Flask, request, jsonify
import os
import re
import gspread
from google.oauth2.service_account import Credentials
import openai
import threading
import time

app = Flask(__name__)

# === –ö–æ–Ω—Ñ–∏–≥ ===
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "your-api-key")
SPREADSHEET_ID = os.getenv("SPREADSHEET_ID", "your-spreadsheet-id")
GOOGLE_CREDS_FILE = os.getenv("GOOGLE_CREDS_FILE", "credentials.json")
CACHE_TTL = 300  # —Å–µ–∫—É–Ω–¥

# === OpenAI ===
openai_client = openai.OpenAI(api_key=OPENAI_API_KEY)

# === Google Sheets ===
scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
creds = Credentials.from_service_account_file(GOOGLE_CREDS_FILE, scopes=scope)
gs_client = gspread.authorize(creds)

# === –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets ===
class SheetCache:
    def __init__(self, ttl):
        self.ttl = ttl
        self.data = []
        self.last_update = 0
        self.lock = threading.Lock()
    
    def get_data(self):
        with self.lock:
            now = time.time()
            if now - self.last_update > self.ttl or not self.data:
                print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...")
                sheet = gs_client.open_by_key(SPREADSHEET_ID).sheet1
                header_row = sheet.row_values(2)
                self.data = sheet.get_all_records(head=2, expected_headers=header_row)
                self.last_update = now
            return self.data

sheet_cache = SheetCache(CACHE_TTL)

# === GPT: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π ===
def extract_keywords_from_text(text):
    system_prompt = (
        "–¢—ã ‚Äî –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å "
        "–∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º –∞–Ω–∞–ª–∏–∑–∞–º. "
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∑–∞–ø—Ä–æ—Å–µ. –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Å–ª–æ–≤–∞. "
        "–û—Ç–≤–µ—Ç: —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, –±–µ–∑ —Ç–æ—á–µ–∫, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π. "
        "–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–∞–º ‚Äî –≤–µ—Ä–Ω–∏ '–Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'."
    )
    try:
        response = openai_client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": text}
            ],
            temperature=0.1
        )
        keywords = response.choices[0].message.content.strip()
        print("üß† GPT –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:", keywords)
        if keywords.lower() == "–Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤":
            return []
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        return list({kw.strip().lower() for kw in keywords.split(",") if kw.strip()})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ OpenAI: {str(e)}")
        return []

# === –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º ===
def contains_word(text, word):
    # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫: –∏—â–µ–º —Å–ª–æ–≤–æ –∏ –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    pattern = r'\b' + re.escape(word) + r'(–∞|—É|–µ|–æ–º|—ã|–æ–≤|–∞—Ö|–∞–º|–∏—è|–∏–π|–∏–µ|–∏—é|–∏–µ–º|–∏–∏)?\b'
    return re.search(pattern, str(text).lower())

def search_rows_by_keywords(keywords, rows):
    matches = []
    for row in rows:
        fields = [
            str(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).lower(),
            str(row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "")).lower(),
            str(row.get("–°–∏–Ω–æ–Ω–∏–º—ã", "")).lower(),
        ]
        for kw in keywords:
            if any(contains_word(f, kw) for f in fields):
                matches.append(row)
                break
    return matches

# === API ===
@app.route("/analyze", methods=["POST"])
def analyze():
    try:
        user_message = request.json.get("text", "").strip()
        if not user_message:
            return jsonify({"error": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"}), 400

        print("üì© –ó–∞–ø—Ä–æ—Å:", user_message)
        keywords = extract_keywords_from_text(user_message)
        print("üîë –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:", keywords)

        if not keywords:
            return jsonify({"response": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É"})

        rows = sheet_cache.get_data()
        results = search_rows_by_keywords(keywords, rows)

        if results:
            response_data = [
                {
                    "name": row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""),
                    "price": row.get("–¶–µ–Ω–∞", ""),
                    "duration": row.get("–°—Ä–æ–∫ –∏—Å–ø.", ""),
                    "description": row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "")
                }
                for row in results[:10]
            ]
            return jsonify({"response": response_data})
        else:
            return jsonify({"response": "–ê–Ω–∞–ª–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"})
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app.run(debug=True, port=5000, host="0.0.0.0")
