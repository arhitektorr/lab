from flask import Flask, request, jsonify
import os
import re
import gspread
from google.oauth2.service_account import Credentials
import openai

# === üîë OpenAI ===
client = openai.OpenAI(api_key="your-api-key")  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

# === üìä Google Sheets ===
scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
creds = Credentials.from_service_account_file("credentials.json", scopes=scope)
gs_client = gspread.authorize(creds)
spreadsheet_id = "your-spreadsheet-id"
sheet = gs_client.open_by_key(spreadsheet_id).sheet1
header_row = sheet.row_values(2)
rows = sheet.get_all_records(head=2, expected_headers=header_row)

# === ‚öôÔ∏è Flask App ===
app = Flask(__name__)

# === üîç GPT-–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ===
def extract_keywords_from_text(text):
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {
                "role": "system",
                "content": (
                    "–¢—ã –±–æ—Ç –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏. –ò–∑–≤–ª–µ–∫–∞–π —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤, –≤–∏—Ç–∞–º–∏–Ω–æ–≤ –∏ –º–∏–∫—Ä–æ—ç–ª–µ–º–µ–Ω—Ç–æ–≤. "
                    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. –ü—Ä–∏–º–µ—Ä—ã:\n"
                    "–ó–∞–ø—Ä–æ—Å: '–•–æ—á—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã' ‚Üí '–≤–∏—Ç–∞–º–∏–Ω D, –≤–∏—Ç–∞–º–∏–Ω B12, —Ñ–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞, –∂–µ–ª–µ–∑–æ'\n"
                    "–ó–∞–ø—Ä–æ—Å: '–ê–Ω–∞–ª–∏–∑—ã –Ω–∞ —â–∏—Ç–æ–≤–∏–¥–∫—É' ‚Üí '–¢–¢–ì, –¢4 —Å–≤–æ–±–æ–¥–Ω—ã–π, –¢3 —Å–≤–æ–±–æ–¥–Ω—ã–π, –∞–Ω—Ç–∏—Ç–µ–ª–∞ –∫ –¢–ü–û'"
                )
            },
            {"role": "user", "content": text}
        ],
        temperature=0.3
    )
    keywords = response.choices[0].message.content.strip()
    print("üß† GPT –≤–µ—Ä–Ω—É–ª –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:", keywords)
    return [kw.strip().lower() for kw in keywords.split(",") if kw.strip()]

# === üîé –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ ===
def contains_exact_word(text, word):
    pattern = r'\b' + re.escape(word) + r'(–∞|—É|–µ|–æ–º|—ã|–æ–≤|–∞—Ö|–∞–º|–∏|—è|—é|–µ–º|–æ–π|–∏–π|—å)?\b'
    return re.search(pattern, text.lower())

def search_rows_by_keywords(keywords):
    matches = []
    for row in rows:
        name = str(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).lower()
        description = str(row.get("–û–ø–∏—Å–∞–Ω–∏–µ", "")).lower()
        
        for kw in keywords:
            if contains_exact_word(name, kw) or contains_exact_word(description, kw):
                matches.append(row)
                break
    return matches

# === ‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ ===
def format_analysis_response(results):
    if not results:
        return "‚ùå –ê–Ω–∞–ª–∏–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å."
    
    response = []
    for i, row in enumerate(results[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        name = row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ê–Ω–∞–ª–∏–∑")
        price = row.get("–¶–µ–Ω–∞", "?")
        days = row.get("–°—Ä–æ–∫ –∏—Å–ø.", "?")
        
        response.append(
            f"{i}Ô∏è‚É£ **{name}**\n"
            f"üí∞ –¶–µ–Ω–∞ ‚Äî {price} —Ä—É–±.\n"
            f"‚è± –°—Ä–æ–∫ ‚Äî {days}\n"
        )
    
    return "\n".join(response)

# === üåê API Endpoint ===
@app.route("/analyze", methods=["POST"])
def analyze():
    user_message = request.json.get("text", "").strip()
    if not user_message:
        return jsonify({"response": "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–∞–∫–∏–µ –∞–Ω–∞–ª–∏–∑—ã –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç."})
    
    try:
        keywords = extract_keywords_from_text(user_message)
        print("üîç –ò—â–µ–º –∞–Ω–∞–ª–∏–∑—ã –ø–æ –∫–ª—é—á–∞–º:", ", ".join(keywords))
        
        results = search_rows_by_keywords(keywords)
        response_text = format_analysis_response(results)
        
        return jsonify({"response": response_text})
    
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
        return jsonify({"response": "üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."})

# === ‚ñ∂ –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app.run(debug=True, port=5000)
