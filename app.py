from flask import Flask, request, jsonify
import os
import re
import gspread
from google.oauth2.service_account import Credentials
import openai

# === üîë OpenAI ===
client = openai.OpenAI(api_key="sk-prAA")

# === üìä Google Sheets ===
scope = ["https://www.googleapis.com/auth/spreadsheets.readonly"]
creds = Credentials.from_service_account_file("credentials.json", scopes=scope)
gs_client = gspread.authorize(creds)
spreadsheet_id = ""
sheet = gs_client.open_by_key(spreadsheet_id).sheet1

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≥—Ä—É–∑–∏–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (—ç—Ç–æ –ø–æ–≤—ã—Å–∏—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ GPT –∏ —Ä—É—á–Ω–æ–π –ø–æ–∏—Å–∫)
header_row = sheet.row_values(2)
rows = sheet.get_all_records(head=2, expected_headers=header_row)
all_test_names = [str(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "")).strip().lower() for row in rows]

# === ‚öôÔ∏è Flask App ===
app = Flask(__name__)

def clean_name(name):
    return re.sub(r"\s+", " ", name.strip().lower())

# === üîç GPT-–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ===
def extract_keywords_from_text(text):
    # –ü—Ä–æ–º–ø—Ç, —Ç–µ–ø–µ—Ä—å GPT –≤–µ—Ä–Ω–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
    prompt = (
        "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏. –¢–µ–±–µ –¥–∞–ª–∏ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ (–Ω–∏–∂–µ), "
        "–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç, —á—Ç–æ –æ–Ω –±—ã —Ö–æ—Ç–µ–ª –ø—Ä–æ–≤–µ—Ä–∏—Ç—å. "
        "–í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¢–ò–ü–û–ì–†–ê–§–ò–ß–ï–°–ö–ò —Ç–æ—á–Ω–æ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –≤ –ø–æ–ª–Ω–æ–º —Å–ø–∏—Å–∫–µ –∞–Ω–∞–ª–∏–∑–æ–≤. "
        "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç '–≤–∏—Ç–∞–º–∏–Ω—ã' –∏–ª–∏ —á—Ç–æ-—Ç–æ –æ–±–æ–±—â–µ–Ω–Ω–æ–µ, –≤—ã–±–µ—Ä–∏ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞. "
        "–ü—Ä–∏–º–µ—Ä –≤—ã–≤–æ–¥–∞: '–≤–∏—Ç–∞–º–∏–Ω d, –≤–∏—Ç–∞–º–∏–Ω b12, —Ñ–µ—Ä—Ä–∏—Ç–∏–Ω'. "
        "–¢–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∏–∫–∞–∫–∏—Ö —Ñ—Ä–∞–∑ –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.\n\n"
        f"–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤:\n{'; '.join(all_test_names)}\n\n"
        "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"{text}"
    )
    response = client.chat.completions.create(
        model="gpt-4o",  # gpt-4o –¥–µ—à–µ–≤–ª–µ, –Ω–æ –º–æ–∂–Ω–æ gpt-4.1
        messages=[
            {"role": "system", "content": prompt}
        ]
    )
    keywords = response.choices[0].message.content.strip()
    print("üß† GPT –≤–µ—Ä–Ω—É–ª –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:", keywords)
    return [clean_name(kw) for kw in keywords.split(",") if kw.strip()]

# –£–ª—É—á—à–µ–Ω–Ω—ã–π Excat match –∏ –ø–æ–¥—Å—Ç—Ä–æ—á–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ (—É—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –º–æ—Ä—Ñ–æ–ª–æ–≥–∏–∏)
def contains_exact_word(text, word):
    pattern = r'(^|\W)' + re.escape(word) + r'($|\W)'
    return re.search(pattern, text.lower())

def search_rows_by_keywords(keywords):
    matches = []
    for row in rows:
        name = clean_name(row.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""))
        if any(kw in name for kw in keywords):
            matches.append(row)
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∞–Ω–∞–ª–∏–∑–æ–≤)
    unique_matches = []
    seen = set()
    for m in matches:
        na = clean_name(m.get("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", ""))
        if na not in seen:
            unique_matches.append(m)
            seen.add(na)
    return unique_matches

# === üåê API ===
@app.route("/analyze", methods=["POST"])
def analyze():
    user_message = request.json.get("text", "")
    if not user_message.strip():
        return "‚ùó –ó–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π.", 200, {'Content-Type': 'text/plain; charset=utf-8'}

    keywords = extract_keywords_from_text(user_message)
    print("üîë –ö–ª—é—á–∏ GPT:", keywords)

    results = search_rows_by_keywords(keywords)

    if results:
        response_lines = [
            f"{i+1}Ô∏è‚É£ {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}\n"
            f"üí∞ –¶–µ–Ω–∞ ‚Äî {row['–¶–µ–Ω–∞']} —Ä—É–±.\n"
            f"‚è±Ô∏è –°—Ä–æ–∫ ‚Äî {row['–°—Ä–æ–∫ –∏—Å–ø.']}\n"
            for i, row in enumerate(results[:10])
        ]
        text_response = "\n".join(response_lines)
        return text_response, 200, {'Content-Type': 'text/plain; charset=utf-8'}
    else:
        return "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.", 200, {'Content-Type': 'text/plain; charset=utf-8'}

# === ‚ñ∂ –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    app.run(debug=True, port=5000)
